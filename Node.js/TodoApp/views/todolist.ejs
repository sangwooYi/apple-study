<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
</head>
<body>
  <!-- axios -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.27.2/axios.min.js" integrity="sha512-odNmoc1XJy5x1TMVMdC7EMs3IVdItLPlCeL5vSUPN2llYKMJ2eByTTAIiiuqLg+GdNr9hF6z81p27DArRFKT7A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <!-- .ejs 파일은 반듯히 views 폴더 내부에 있어야한다 (그냥 그렇게 정해줌) -->
  <h4>Todo 리스트</h4>
  <!-- ejs 파일에서 서버로 부터 받은 파일 표기하는 방법 (react나 vue에서 { 값 } 이거랑 똑같은거 ) -->
  <!-- EJS 파일도 JSX랑 유사하다! 자바스크립트 쓰려면 <%%> 안에 담아야함 
    그냥 EJS도 JSX 처럼 자바스크립트 코드 내부에 HTML 태그를 포함시킬 수 있는 템플릿!
    JSX 보다 조금 더 코드가 더럽다는 단점이 있고.
    자바스크립트의 줄마다 <%%> 를 감싸서 적어야 한다. (이래서 더러워짐)
    React에서는 따라서 JSX를 사용한 것 (그냥 return에 HTML 태그를 적으면 되서)
  -->
  <% for (let i = 0; i < posts.length; i++) { %>
  <div>
    <h5>할일: <%= posts[i].title %></h5>
    <p>일자: <%= posts[i].date %></p>
    <p>글번호: <%= posts[i]._id %></p>
    <!-- data-작명=저장할 값, 이렇게 태그에 특정 값을 저장할 수 있다. -->
    <button class="detail" data-id="<%= posts[i]._id %>">자세히</button>
    <button id="<%= posts[i]._id %>" class="button">삭제</button>
  </div>
  <% } %>
  <script>
    const btns = document.querySelectorAll('.button');
    const detailBtns = document.querySelectorAll('.detail');

    const moveToDetail = (id) => {
      axios.get(`/detail/${id}`)
      .then((res) => {
        // 자바스크립트롤 페이지 이동을 별도로 해주어야 한다! (서버에서는 렌더링만 해주는 것)
        location.href = `http://localhost:8080/detail/${id}`
      })
      .catch((err) => {
        
      })
    }


    const deleteBoard = (board) => {
      axios({
        method: 'delete',
        url: '/delete',
        data: {_id: board.id}
      })
      .then((res) => {
        console.log(res);
        // 요소 삭제하는 방법! (부모-자식 관계가 확실하면 부모.removeChild(자식) 이렇게도 가능)
        board.parentNode.remove();

      })
      .catch((err) => {
        console.log(err);
      })
    }


    // forEach, map, filter, reduce는 기본적으로 쓸 수 있어야 한다.
    btns.forEach((btn, idx) => {
      btn.addEventListener('click', (e) => {
        const board = e.target;
        deleteBoard(board);
      });
    });

    detailBtns.forEach((btn, idx) => {
      btn.addEventListener('click', (e) => {
        // data-작명 으로 저장한 값은 dataset.작명 이렇게 불러 올 수 있다.
        const id = e.target.dataset.id;
        moveToDetail(id);
      })
    })
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
</body> 
</html>